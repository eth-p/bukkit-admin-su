// ---------------------------------------------------------------------------------------------------------------------
// Dependencies
// ---------------------------------------------------------------------------------------------------------------------
dependencies {
	api project(':common').sourceSets.api.output
	
	implementation project(':common')
	implementation project(':common').sourceSets.base.output
}

// ---------------------------------------------------------------------------------------------------------------------
// API: Sources
// ---------------------------------------------------------------------------------------------------------------------
sourceSets {
	api {
		java {
			compileClasspath += configurations.compileClasspath
		}
	}
	main {
		java {
			srcDir 'src/main-impl/java'
			
			compileClasspath += api.output
			runtimeClasspath += api.output
		}
	}
}


// ---------------------------------------------------------------------------------------------------------------------
// API: Javadocs
// ---------------------------------------------------------------------------------------------------------------------
javadoc {
	classpath = sourceSets.api.compileClasspath
	source = sourceSets.api.allJava + project(':common').sourceSets.api.allJava
}


// ---------------------------------------------------------------------------------------------------------------------
// API: Packaging
// ---------------------------------------------------------------------------------------------------------------------
def platform = project.name.startsWith("platform-") ? project.name.substring(9) : project.name

task apiJar(type: Jar) {
	from sourceSets.api.output
	from project(':common').sourceSets.api.output
	
	archiveBaseName = "api-${platform}"
	archiveClassifier = null
}

task apiJavadocJar(type: Jar) {
	from javadoc

	archiveBaseName = "api-${platform}"
	archiveClassifier = 'javadoc'
}

task apiSourcesJar(type: Jar) {
	from project(':common').sourceSets.api.allJava
	from sourceSets.api.allJava

	archiveBaseName = "api-${platform}"
	archiveClassifier = 'sources'
}

task api {
	dependsOn 'apiJar'
	dependsOn 'apiJavadocJar'
	dependsOn 'apiSourcesJar'
}


// ---------------------------------------------------------------------------------------------------------------------
// Platform: Packaging
// ---------------------------------------------------------------------------------------------------------------------

jar.enabled = false

shadowJar {
	dependsOn generateBukkitManifest
	
	archiveBaseName = "${rootProject.name}-${platform}"
	archiveClassifier = null

	from generateBukkitManifest.output
	
	from sourceSets.api.output
	from sourceSets.main.resources
	from project(':common').sourceSets.main.output
	
	relocate 'dev.ethp.adminsu.base', 'dev.ethp.adminsu._internal.base'
	relocate 'dev.ethp.adminsu.common', 'dev.ethp.adminsu._internal.impl.common'
	relocate 'dev.ethp.adminsu.bukkit.impl', 'dev.ethp.adminsu._internal.impl.bukkit'
}

build.dependsOn 'shadowJar'


// ---------------------------------------------------------------------------------------------------------------------
// API: Publishing
// ---------------------------------------------------------------------------------------------------------------------

publishing {

	publications {
		maven(MavenPublication) { publication ->
			publication.artifacts = [apiJar, apiSourcesJar, apiJavadocJar]
			groupId = meta.group
			artifactId = platform
		}
	}

	repositories {
		mavenLocal()
		if (env.isPresent('PUBLISH_MAVEN_REPO')) {
			maven {
				url = env.PUBLISH_MAVEN_REPO.value
				credentials {
					username env.PUBLISH_MAVEN_USERNAME.value
					password env.PUBLISH_MAVEN_PASSWORD.value
					authentication {
						basic(BasicAuthentication)
					}
				}
			}
		}
	}
}

tasks.withType(PublishToMavenRepository) { task ->
	dependsOn 'api'
}
